version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.1
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl --insecure https://kvdb.io/LwfjS5JcxvnfaZhWDgyGw8/migration__<< parameters.workflow_id >>)
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
            fi



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm cache
          keys: [frontend-build]
      - run:
          name: build-frontend
          command: |
            cd frontend
            npm install
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build



  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm package cache
          keys: [backend-build]
      - run:
          name: build-backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore cache
          keys: [frontend-build]
      - run:
          name: test-frontend
          command: |
              cd frontend
              npm install
              npm run test

  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm package cache
          keys: [backend-build]
      - run:
          name: test-backend
          command: |
              cd backend
              npm install
              npm run test
      


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore cache
          keys: [frontend-build]
      - run:
          name: scan-frontend
          command: |
              cd frontend
              npm install
              npm audit fix --force



  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore cache
          keys: [backend-build]
      - run:
          name: scan-backend
          command: |
              cd backend
              npm install
              npm fund
              npm audit fix --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: ensure backend infrastructure exists
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags Project=udapeople \
                --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure frontend infrastructure exists 
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Add backend ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text >> .circleci/ansible/inventory.txt
            
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-server:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ff:36:ea:ad:ae:f0:27:84:c1:45:fb:f6:bb:6d:3e:e9"]
      
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: |
              sudo apt-get update 
              sudo apt-get upgrade -y
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              npm run migrations --force > migrations.txt
              cat migrations.txt
      - run: 
          name: Send Migration results to kvdb
          command: |
              cat ~/project/backend/migrations.txt
              if grep -q "has been executed successfully" ~/project/backend/migrations.txt
              then
                echo "DB migration was successful, will update kvdb..."
                curl "https://kvdb.io/LwfjS5JcxvnfaZhWDgyGw8/migration_${CIRCLE_WORKFLOW_ID:0:7}"  -d '1'
              fi 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}



  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Install dependencies 
          command: |
              apk add --update ansible tar curl nodejs npm
              pip install awscli
      - attach_workspace:
          at: ~/
      - run: 
          name: Get backend url
          command: |     
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udapeople" \
              --output text)
              echo "${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
      - run: 
          name: Deploy frontend objects
          command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps: 
      - checkout
      - add_ssh_keys:
          fingerprints: ["ff:36:ea:ad:ae:f0:27:84:c1:45:fb:f6:bb:6d:3e:e9"]  
      - run: 
          name: Install dependenciess.
          command: |
                apk add --update --no-cache tar gzip rsync nodejs npm  ansible curl openssh
                pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
                cd backend
                npm i
                npm run build
                cd ..
                tar -C backend -czvf artifact.tar.gz .
                mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
                cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            
                export TYPEORM_MIGRATIONS_DIR=./migrations
                export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
                export TYPEORM_MIGRATIONS=./migrations/*.ts
                cd .circleci/ansible
                echo "Contents  of the inventory.txt file is -------"
                cat inventory.txt
                export ANSIBLE_HOST_KEY_CHECKING=False
                ansible-playbook -i inventory.txt deploy-backend.yml -v
      # - run: 
      #     name: Deploy backend
      #     command: |
      #           cd ~/project/backend
      #           npm install
      #           npm run build
      #           cd ..
      #           tar -C backend -czvf artifact.tar.gz .
      #           cd .circleci/ansible
      #           echo "Contents  of the inventory.txt file is -------"
      #           cat inventory.txt
      #           ansible-playbook -i inventory.txt deploy-backend.yml
              
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  smoke-test:

    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
            apk add --update --no-cache tar gzip nodejs npm curl
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
             export API_URL="http://${BACKEND_IP}:3030"
             echo $API_URL
             if curl "${API_URL}/api/status" | grep "ok"
             then
                 return 0
             else
                 return 1
             fi
      - run:
           name: Frontend smoke test.
           command: |
             export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
             echo ${URL}
             if curl -s ${URL} | grep "Welcomee"
             then
               return 0
             else
               return 1
             fi
    


workflows:
  default:
    jobs:
       - build-frontend
       - build-backend
       - test-frontend:
           requires: [build-frontend]
       - test-backend:
           requires: [build-backend]
       - scan-backend:
           requires: [build-backend]
       - scan-frontend:
           requires: [build-frontend]
       - deploy-infrastructure:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
       - configure-server:
            requires: [deploy-infrastructure]
       - run-migrations:
           requires: [configure-server]
       - deploy-frontend:
           requires: [run-migrations]
       - deploy-backend:
           requires: [run-migrations]
       - smoke-test:
           requires: [deploy-frontend, deploy-backend]