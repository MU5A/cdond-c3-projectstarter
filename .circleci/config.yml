version: 2.1


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm cache
          keys: [frontend-build]
      - run:
          name: build-frontend
          command: |
            cd frontend
            npm install
            npm run build 



  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm package cache
          keys: [backend-build]
      - run:
          name: build-backend
          command: |
            cd backend
            npm install
            npm run build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm pckage cache
          keys: [frontend-test]
      - run:
          name: test-frontend
          command: |
              cd frontend
              npm install
              npm run test

  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm package cache
          keys: [backend-test]
      - run:
          name: test-backend
          command: |
              cd backend
              npm install
              npm run test
      


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm package cache
          keys: [frontend-scan]
      - run:
          name: scan-frontend
          command: |
              cd frontend
              npm install
              npm audit fix --force



  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm package cache
          keys: [backend-scan]
      - run:
          name: scan-backend
          command: |
              cd backend
              npm install
              npm fund
              npm audit fix --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: ensure backend infrastructure exists
          command: |
              aws cloudformation deploy \
                      --template-file .circleci/files/backend.yml \
                      --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                      --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exists 
          command: |
              aws cloudformation deploy \
                      --template-file .circleci/files/frontend.yml \
                      --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                      --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
              aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --output text >> inventory.txt
              cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-server:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["71:a6:8f:bd:22:e2:4b:d8:4f:e3:35:03:b1:ef:64:d4"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory configure-server.yml
  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-server:
          requires: [deploy-infrastructure]
    