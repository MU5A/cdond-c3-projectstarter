version: 2.1


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm cache
          keys: [frontend-build]
      - run:
          name: build-frontend
          command: |
            cd frontend
            npm install
            npm run build 



  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm package cache
          keys: [backend-build]
      - run:
          name: build-backend
          command: |
            cd backend
            npm install
            npm run build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm pckage cache
          keys: [frontend-test]
      - run:
          name: test-frontend
          command: |
              cd frontend
              npm install
              npm run test

  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm package cache
          keys: [backend-test]
      - run:
          name: test-backend
          command: |
              cd backend
              npm install
              npm run test
      


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm package cache
          keys: [frontend-scan]
      - run:
          name: scan-frontend
          command: |
              cd frontend
              npm install
              npm audit fix --force



  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore npm package cache
          keys: [backend-scan]
      - run:
          name: scan-backend
          command: |
              cd backend
              npm install
              npm fund
              npm audit fix --force

  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: yum install -y tar gzip
        - run:
            command: |
                  cd .circleci/files
                  aws cloudformation deploy \
                          --template-file cloudfront.yml \
                          --stack-name InitialStack \
                          --parameter-overrides WorkflowID=udapeople-kk1j287dhjppmz0000 \
                          --region us-east-1

        - run:
            name: Install backend dependencies
            command: |
                aws cloudformation deploy \
                        --template-file .circleci/files/backend.yml \
                        --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                        --tags project=udapeople
        - run:
            name: Deploy frontend infrastructure
            working_directory: ./.circleci/files
            command: |
                aws cloudformation deploy \
                        --template-file frontend.yaml \
                        --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                        --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
        - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
              aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --output text >> inventory
              cat inventory
        - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
        - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

    
              







workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]